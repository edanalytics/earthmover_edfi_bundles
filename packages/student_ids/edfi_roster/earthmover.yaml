version: 2

config:
  parameter_defaults:
    EDFI_STUDENT_ID_TYPES: "" # User should supply this!

sources:
  edfi_roster: # the user must supply this when using this package!
    file: ""
    # !! IF FROM `lightbeam fetch -s studentEducationOrganizationAssociations -k studentIdentificationCodes,educationOrganizationReference,studentReference`
    # file: /efs/path/to/.../studentEducationOrganizationAssociations.jsonl
    # !! IF FROM SNOWFLAKE:
    # connection: "snowflake://$SNOWFLAKE_USER:$SNOWFLAKE_PASS@$SNOWFLAKE_ACCOUNT?warehouse=$SNOWFLAKE_WAREHOUSE"
    # # This is a Snowflake SQL query which constructs a structure like the student ID portion of
    # # Ed-Fi studentEducationOrganizationAssociations from EDU warehouse data:
    # query: >
    #   with ids as (
    #       select
    #           tenant_code, api_year, k_student, ed_org_id,
    #           object_construct_keep_null('assigningOrganizationIdentificationCode', id_system,
    #               'identificationCode', id_code) as stu_id_code,
    #       from analytics.prod_stage.stg_ef3__stu_ed_org__identification_codes
    #   ),
    #   aggd_ids as (
    #       select
    #           tenant_code, api_year, k_student, ed_org_id,
    #           array_agg(stu_id_code) as stu_id_codes
    #       from ids group by 1,2,3,4
    #   )
    #   select
    #       object_construct('educationOrganizationId', ed_org_id,
    #       'link', object_construct(
    #           'rel', 'LocalEducationAgency')) as "educationOrganizationReference",
    #       object_construct('studentUniqueId', stu.student_unique_id) as "studentReference",
    #       stu_id_codes as "studentIdentificationCodes"
    #   from aggd_ids
    #       join analytics.prod_stage.stg_ef3__students stu on aggd_ids.k_student=stu.k_student
    #   where aggd_ids.tenant_code='some_tenant' -- UPDATE THIS!
    #       and aggd_ids.api_year=2025           -- UPDATE THIS!

transformations:
  unpacked_edfi_roster:
    source: $sources.edfi_roster
    operations:
      - operation: add_columns
        columns:
          edOrgId: '{%raw%}{{educationOrganizationReference.educationOrganizationId}}{%endraw%}'
          edOrgType: '{%raw%}{{educationOrganizationReference.link.rel}}{%endraw%}'
          studentUniqueId: '{%raw%}{{studentReference.studentUniqueId}}{%endraw%}'
          # TODO: could maybe use a flatten operation for this?
          {% for id_code in "${EDFI_STUDENT_ID_TYPES}".split(",") %}
          {{id_code}}: '{%raw%}{{(studentIdentificationCodes|selectattr("assigningOrganizationIdentificationCode","eq","{%endraw%}{{id_code}}{%raw%}")|first or {"identificationCode":""}).identificationCode}}{%endraw%}'
          {% endfor %}
      - operation: keep_columns
        columns:
          - edOrgId
          - edOrgType
          - studentUniqueId
          {% for id_code in "${EDFI_STUDENT_ID_TYPES}".split(",") %}
          - {{id_code}}
          {% endfor %}