version: 2


config:
  log_level: DEBUG
  output_dir: ./output/ #${OUTPUT_DIR} # TODO: change back
  memory_limit: 1GB
  state_file: ./runs.csv
  show_graph: False
  show_stacktrace: true
  parameter_defaults:
    STUDENT_ID_NAME: ''
    STUDENT_ID_FROM: ''
    STUDENT_ID_XWALK: './seeds/exampleXwalk.csv'
    STUDENT_ID_QUERY: ''
    DATABASE_CONNECTION: ''


sources:
  results_file:
    file: ${INPUT_FILE}
    header_rows: 1
  assessments:
    file: ./seeds/assessments.csv
    header_rows: 1
  assessmentReportingMethodDescriptors:
    file: ./seeds/assessmentReportingMethodDescriptors.csv
    header_rows: 1
  objectiveAssessments:
    file: ./seeds/objectiveAssessments.csv
    header_rows: 1
  performanceLevelDescriptors:
    file: ./seeds/performanceLevelDescriptors.csv
    header_rows: 1
  {% if "${STUDENT_ID_QUERY}" | length %}
  student_id_mapping:
    connection: ${DATABASE_CONNECTION}
    query: ${STUDENT_ID_QUERY}

  {% else %}
  student_id_mapping:
    file: ${STUDENT_ID_XWALK}
    header_rows: 1
    columns: 
      - student_id_from 
      - student_id_to
    optional: True 
  {% endif %}


transformations:
  {% set raw_tests = ["verbal", "quantitative", "nonverbal"]%}
  {% set all_tests = ["verbal", "quantitative", "nonverbal", "composite_vq", "composite_vn", "composite_qn", "composite_vqn"]%}
  clean_results: # TODO: name?
    source: $sources.results_file
    operations:
      - operation: join 
        sources: 
          - $sources.student_id_mapping
        left_key: ${STUDENT_ID_FROM}
        right_key: student_id_from
        join_type: left
      - operation: map_values
        column: Class_Grade
        map_file: ${BUNDLE_DIR}/seeds/mapping_GradeLevels.csv
      - operation: date_format
        column: Date_Tested
        from_format: "%m%d%Y"
        to_format: "%Y-%m-%d"
  scored_results:
    source: $transformations.clean_results
    operations:
      - operation: add_columns
        columns:
        
        {% for test in raw_tests %}
          # 2 chars each
          number_attempted_{{test}}: "{% raw %}{{Number_Attempted_NA[{% endraw %}(2 * {{loop.index - 1}}):(2 * {{loop.index - 1}}) + 2{% raw %}]}}{% endraw %}"
          raw_score_{{test}}: "{% raw %}{{Raw_Score_RS[{% endraw %}(2 * {{loop.index - 1}}):(2 * {{loop.index - 1}}) + 2{% raw %}]}}{% endraw %}"

          # 7 chars each
          raw_pse_{{test}}: "{% raw %}{{Raw_Score_Personal_Standard_Error[{% endraw %}(7 * {{loop.index - 1}}):(7 * {{loop.index - 1}}) + 7{% raw %}]}}{% endraw %}"
          raw_upper_{{test}}: "{% raw %}{{Raw_Score_Upper_Bound[{% endraw %}(7 * {{loop.index - 1}}):(7 * {{loop.index - 1}}) + 7{% raw %}]}}{% endraw %}"
          raw_lower_{{test}}: "{% raw %}{{Raw_Score_Lower_Bound[{% endraw %}(7 * {{loop.index - 1}}):(7 * {{loop.index - 1}}) + 7{% raw %}]}}{% endraw %}"
        {% endfor %}

        {% for test in all_tests %}

          # flag variables - 1 char each
          completed_{{test}}: "{% raw %}{{Completion_Criteria_CC[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"
          sas_valid_{{test}}: "{% raw %}{{SAS_Valid_Flags[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"
          tmo_{{test}}: "{% raw %}{{TMO_Flags[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"
          ev_{{test}}: "{% raw %}{{Extremely_Variable_Flags[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"
          chance_{{test}}: "{% raw %}{{Chance_Flags[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"

          # 1 char each
          gs_{{test}}: "{% raw %}{{Grade_Stanine_GS[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"
          as_{{test}}: "{% raw %}{{Age_Stanine_AS[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"
          ls_{{test}}: "{% raw %}{{Local_Stanines[{% endraw %}{{loop.index - 1}}{% raw %}]}}{% endraw %}"

          # 2 chars each
          gpr_{{test}}: "{% raw %}{{Grade_Percentile_Rank_GPR[{% endraw %}(2 * {{loop.index - 1}}):(2 * {{loop.index - 1}}) + 2{% raw %}]}}{% endraw %}"
          apr_{{test}}: "{% raw %}{{Age_Percentile_Rank_APR[{% endraw %}(2 * {{loop.index - 1}}):(2 * {{loop.index - 1}}) + 2{% raw %}]}}{% endraw %}"
          lpr_{{test}}: "{% raw %}{{Local_Percentile_Rank[{% endraw %}(2 * {{loop.index - 1}}):(2 * {{loop.index - 1}}) + 2{% raw %}]}}{% endraw %}"

          # 3 chars each
          uss_{{test}}: "{% raw %}{{Universal_Scale_Score_USS[{% endraw %}(3 * {{loop.index - 1}}):(3 * {{loop.index - 1}}) + 3{% raw %}]}}{% endraw %}"
          sas_{{test}}: "{% raw %}{{Standard_Age_Score_SAS[{% endraw %}(3 * {{loop.index - 1}}):(3 * {{loop.index - 1}}) + 3{% raw %}]}}{% endraw %}"
          
          # 6 chars each
          sas_upper_{{test}}: "{% raw %}{{SAS_Upper_Bound[{% endraw %}(6 * {{loop.index - 1}}):(6 * {{loop.index - 1}}) + 6{% raw %}]}}{% endraw %}"
          sas_lower_{{test}}: "{% raw %}{{SAS_Lower_Bound[{% endraw %}(6 * {{loop.index - 1}}):(6 * {{loop.index - 1}}) + 6{% raw %}]}}{% endraw %}"
        {% endfor %}
  coded_results:
    source: $transformations.scored_results
      - operation: map_values
        columns:
        {% for test in all_tests %}
          - completed_{{test}}
          - sas_valid_{{test}}
          - tmo_{{test}}
          - ev_{{test}}
          - chance_{{test}}
        {% endfor %}
        mapping:
          "1": "Y"
          "0": "N"
          # TODO: nulls / na?

destinations:
  assessments:
    source: $sources.assessments
    template: ./templates/assessments.jsont
    extension: jsonl
  assessmentReportingMethodDescriptors:
    source: $sources.assessmentReportingMethodDescriptors
    template: ./templates/assessmentReportingMethodDescriptors.jsont
    extension: jsonl
  performanceLevelDescriptors:
    source: $sources.performanceLevelDescriptors
    template: ./templates/performanceLevelDescriptors.jsont
    extension: jsonl
  objectiveAssessments:
    source: $sources.objectiveAssessments
    template: ./templates/objectiveAssessments.jsont
    extension: jsonl
  studentAssessments:
    source: $transformations.scored_results
    template: ./templates/studentAssessments.jsont
    extension: jsonl