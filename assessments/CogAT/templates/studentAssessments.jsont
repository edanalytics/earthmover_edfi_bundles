{
  "studentAssessmentIdentifier": "{{TestInstance_GUID}}",
  "assessmentReference": {
    "assessmentIdentifier": "CogAT",
    "namespace": "uri://www.riversideinsights.com/cognitive_abilities_test"
  },
  "schoolYearTypeReference": {
    "schoolYear": "{{schoolYear}}"
  },
  "studentReference": {
    "studentUniqueId": "{{studentUniqueID}}"
  },
  "administrationDate": "{{adminDate}}",
  "whenAssessedGradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#{{Class_Grade}}",
  "scoreResults": [
  {% set scores = [] %}

    {% if Battery is not none and Battery | length %}
      {% set _ = scores.append([Battery, 'Battery', 'Level']) %}
    {% endif %}

    {% if Level is not none and Level | length %}
      {% set _ = scores.append([Level, 'Level', 'Level']) %}
    {% endif %}

    {% if Form is not none and Form | length %}
      {% set _ = scores.append([Form, 'Form', 'Level']) %}
    {% endif %}

    {% if Norm_Year is not none and Norm_Year | length %}
      {% set _ = scores.append([Norm_Year, 'Norm Year', 'Level']) %}
    {% endif %}

    {# FIXME: what if incomplete?? #}

    {% if Universal_Scale_Score_USS_composite_vqn is not none and Universal_Scale_Score_USS_composite_vqn | length %}
      {% set _ = scores.append([Universal_Scale_Score_USS_composite_vqn, 'Universal Scale Score', 'Integer']) %}
    {% endif %}

    {% if Standard_Age_Score_SAS_composite_vqn is not none and Standard_Age_Score_SAS_composite_vqn | length %}
      {% set _ = scores.append([Standard_Age_Score_SAS_composite_vqn, 'Standard Age Score', 'Integer']) %}
    {% endif %}

    {% if SAS_Upper_Bound_composite_vqn is not none and SAS_Upper_Bound_composite_vqn | length %}
      {% set _ = scores.append([SAS_Upper_Bound_composite_vqn, 'Standard Age Score Upper Bound', 'Decimal']) %}
    {% endif %}

    {% if SAS_Lower_Bound_composite_vqn is not none and SAS_Lower_Bound_composite_vqn | length %}
      {% set _ = scores.append([SAS_Lower_Bound_composite_vqn, 'Standard Age Score Lower Bound', 'Decimal']) %}
    {% endif %}

    {% if Grade_Percentile_Rank_GPR_composite_vqn is not none and Grade_Percentile_Rank_GPR_composite_vqn | length %}
      {% set _ = scores.append([Grade_Percentile_Rank_GPR_composite_vqn, 'Grade Percentile Rank', 'Percentile']) %}
    {% endif %}

    {% if Age_Percentile_Rank_APR_composite_vqn is not none and Age_Percentile_Rank_APR_composite_vqn | length %}
      {% set _ = scores.append([Age_Percentile_Rank_APR_composite_vqn, 'Age Percentile Rank', 'Percentile']) %}
    {% endif %}

    {% if Local_Percentile_Rank_composite_vqn is not none and Local_Percentile_Rank_composite_vqn | length %}
      {% set _ = scores.append([Local_Percentile_Rank_composite_vqn, 'Local Percentile Rank', 'Percentile']) %}
    {% endif %}

    {% if Grade_Stanine_GS_composite_vqn is not none and Grade_Stanine_GS_composite_vqn | length %}
      {% set _ = scores.append([Grade_Stanine_GS_composite_vqn, 'Grade Stanine', 'Level']) %}
    {% endif %}
    
    {% if Age_Stanine_AS_composite_vqn is not none and Age_Stanine_AS_composite_vqn | length %}
      {% set _ = scores.append([Age_Stanine_AS_composite_vqn, 'Age Stanine', 'Level']) %}
    {% endif %}

    {% if Local_Stanines_composite_vqn is not none and Local_Stanines_composite_vqn | length %}
      {% set _ = scores.append([Local_Stanines_composite_vqn, 'Local Stanine', 'Level']) %}
    {% endif %}

        {% for score in scores %}
    {
      "assessmentReportingMethodDescriptor": "uri://www.cde.state.co.us/assessment/cmas/AssessmentReportingMethodDescriptor#{{score[1]}}",
      "resultDatatypeTypeDescriptor": "uri://ed-fi.org/ResultDatatypeTypeDescriptor#{{score[2]}}",
      "result": "{{score[0]}}"
    } {% if not loop.last %},{% endif %}
    {% endfor %}
  ],
  "performanceLevels": [
    {% set perf_levels = [] %}

    {% if completed_composite_vqn is not none and completed_composite_vqn == "1" %}
      {% set _ = perf_levels.append([completed_composite_vqn, 'Completion Criteria Met']) %}
    {% endif %}

    {% if sas_valid_composite_vqn is not none and sas_valid_composite_vqn == "1" %}
      {% set _ = perf_levels.append([sas_valid_composite_vqn, 'Standard Age Score Valid Flag']) %}
    {% endif %}

    {% if tmo_composite_vqn is not none and tmo_composite_vqn == "1" %}
      {% set _ = perf_levels.append([tmo_composite_vqn, 'Too Many Omits Flag']) %}
    {% endif %}

    {% if ev_composite_vqn is not none and ev_composite_vqn == "1" %}
      {% set _ = perf_levels.append([ev_composite_vqn, 'Extremely Variable Flag']) %}
    {% endif %}

    {% if chance_composite_vqn is not none and chance_composite_vqn == "1" %}
      {% set _ = perf_levels.append([chance_composite_vqn, 'Chance Flag']) %}
    {% endif %}

    {% if Ability_Profile is not none and Ability_Profile | length %}
      {% set _ = perf_levels.append([Ability_Profile, 'Ability Profile']) %}
    {% endif %}

    {% for perf_level in perf_levels %}
      {
        "assessmentReportingMethodDescriptor": "uri://www.riversideinsights.com/cognitive_abilities_test/AssessmentReportingMethodDescriptor#{{perf_level[1]}}",
        "performanceLevelDescriptor": "uri://www.riversideinsights.com/cognitive_abilities_test/PerformanceLevelDescriptor#{{perf_level[0]}}",
        "performanceLevelMet": true
      } {% if not loop.last %},{% endif %}
    {% endfor %}
  ],

  "studentObjectiveAssessments": [
    {% set all_obj_assess = {
      "Verbal": {
        "scores": [
          ("Raw score", int(raw_score_verbal), "Integer"),
          ("Number attempted", int(number_attempted_verbal), "Integer"),
          ("Universal scale score", uss_verbal, "Integer"),
          ("Standard Age Score", sas_verbal, "Integer"),
          ("Grade Percentile Rank", gpr_verbal, "Integer"),
          ("Age Percentile Rank", apr_verbal, "Integer"),
          ("Local Percentile Rank", lpr_verbal, "Integer"),
          ("Grade Stanine", gs_verbal, "Integer"),
          ("Age Stanine", as_verbal, "Integer"),
          ("Local Stanine", ls_verbal, "Integer"),
          ("Standard Age Score Upper Bound", sas_upper_verbal, "Decimal"),
          ("Standard Age Score Lower Bound", sas_lower_verbal, "Decimal"),
          ("Raw Score Personal Standard Error", raw_pse_verbal, "Decimal"),
          ("Raw Score Upper Bound", raw_upper_verbal, "Decimal"),
          ("Raw Score Lower Bound", raw_lower_verbal, "Decimal")
        ],
        "performanceLevels": [
          ("Completion Criteria Met", completed_verbal),
          ("Standard Age Score Valid Flag", sas_valid_verbal),
          ("Too Many Omits Flag", tmo_verbal),
          ("Extremely Variable Flag", ev_verbal),
          ("Chance Flag", chance_verbal)
        ]
      },
      "Quantitative": {
        "scores": [
          ("Raw score", raw_score_quantitative, "Integer"),
          ("Number attempted", number_attempted_quantitative, "Integer"),
          ("Universal scale score", uss_quantitative, "Integer"),
          ("Standard Age Score", sas_quantitative, "Integer"),
          ("Grade Percentile Rank", gpr_quantitative, "Integer"),
          ("Age Percentile Rank", apr_quantitative, "Integer"),
          ("Local Percentile Rank", lpr_quantitative, "Integer"),
          ("Grade Stanine", gs_quantitative, "Integer"),
          ("Age Stanine", as_quantitative, "Integer"),
          ("Local Stanine", ls_quantitative, "Integer"),
          ("Standard Age Score Upper Bound", sas_upper_quantitative, "Decimal"),
          ("Standard Age Score Lower Bound", sas_lower_quantitative, "Decimal"),
          ("Raw Score Personal Standard Error", raw_pse_quantitative, "Decimal"),
          ("Raw Score Upper Bound", raw_upper_quantitative, "Decimal"),
          ("Raw Score Lower Bound", raw_lower_quantitative, "Decimal")
        ],
        "performanceLevels": [
          ("Completion Criteria Met", completed_quantitative),
          ("Standard Age Score Valid Flag", sas_valid_quantitative),
          ("Too Many Omits Flag", tmo_quantitative),
          ("Extremely Variable Flag", ev_quantitative),
          ("Chance Flag", chance_quantitative)
        ]
      },
      "Nonverbal": {
        "scores": [
          ("Raw score", raw_score_nonverbal, "Integer"),
          ("Number attempted", number_attempted_nonverbal, "Integer"),
          ("Universal scale score", uss_nonverbal, "Integer"),
          ("Standard Age Score", sas_nonverbal, "Integer"),
          ("Grade Percentile Rank", gpr_nonverbal, "Integer"),
          ("Age Percentile Rank", apr_nonverbal, "Integer"),
          ("Local Percentile Rank", lpr_nonverbal, "Integer"),
          ("Grade Stanine", gs_nonverbal, "Integer"),
          ("Age Stanine", as_nonverbal, "Integer"),
          ("Local Stanine", ls_nonverbal, "Integer"),
          ("Standard Age Score Upper Bound", sas_upper_nonverbal, "Decimal"),
          ("Standard Age Score Lower Bound", sas_lower_nonverbal, "Decimal"),
          ("Raw Score Personal Standard Error", raw_pse_nonverbal, "Decimal"),
          ("Raw Score Upper Bound", raw_upper_nonverbal, "Decimal"),
          ("Raw Score Lower Bound", raw_lower_nonverbal, "Decimal")
        ],
        "performanceLevels": [
          ("Completion Criteria Met", completed_nonverbal),
          ("Standard Age Score Valid Flag", sas_valid_nonverbal),
          ("Too Many Omits Flag", tmo_nonverbal),
          ("Extremely Variable Flag", ev_nonverbal),
          ("Chance Flag", chance_nonverbal)
        ]
      },
      "Composite (V+Q)": {
        "scores": [
          ("Universal scale score", uss_composite_vq, "Integer"),
          ("Standard Age Score", sas_composite_vq, "Integer"),
          ("Grade Percentile Rank", gpr_composite_vq, "Integer"),
          ("Age Percentile Rank", apr_composite_vq, "Integer"),
          ("Local Percentile Rank", lpr_composite_vq, "Integer"),
          ("Grade Stanine", gs_composite_vq, "Integer"),
          ("Age Stanine", as_composite_vq, "Integer"),
          ("Local Stanine", ls_composite_vq, "Integer"),
          ("Standard Age Score Upper Bound", sas_upper_composite_vq, "Decimal"),
          ("Standard Age Score Lower Bound", sas_lower_composite_vq, "Decimal"),
        ],
        "performanceLevels": [
          ("Completion Criteria Met", completed_composite_vq),
          ("Standard Age Score Valid Flag", sas_valid_composite_vq),
          ("Too Many Omits Flag", tmo_composite_vq),
          ("Extremely Variable Flag", ev_composite_vq),
          ("Chance Flag", chance_composite_vq)
        ]
      },
      "Composite (V+N)": {
        "scores": [
          ("Universal scale score", uss_composite_vn, "Integer"),
          ("Standard Age Score", sas_composite_vn, "Integer"),
          ("Grade Percentile Rank", gpr_composite_vn, "Integer"),
          ("Age Percentile Rank", apr_composite_vn, "Integer"),
          ("Local Percentile Rank", lpr_composite_vn, "Integer"),
          ("Grade Stanine", gs_composite_vn, "Integer"),
          ("Age Stanine", as_composite_vn, "Integer"),
          ("Local Stanine", ls_composite_vn, "Integer"),
          ("Standard Age Score Upper Bound", sas_upper_composite_vn, "Decimal"),
          ("Standard Age Score Lower Bound", sas_lower_composite_vn, "Decimal"),
        ],
        "performanceLevels": [
          ("Completion Criteria Met", completed_composite_vn),
          ("Standard Age Score Valid Flag", sas_valid_composite_vn),
          ("Too Many Omits Flag", tmo_composite_vn),
          ("Extremely Variable Flag", ev_composite_vn),
          ("Chance Flag", chance_composite_vn)
        ]
      },
      "Composite (Q+N)": {
        "scores": [
          ("Universal scale score", uss_composite_qn, "Integer"),
          ("Standard Age Score", sas_composite_qn, "Integer"),
          ("Grade Percentile Rank", gpr_composite_qn, "Integer"),
          ("Age Percentile Rank", apr_composite_qn, "Integer"),
          ("Local Percentile Rank", lpr_composite_qn, "Integer"),
          ("Grade Stanine", gs_composite_qn, "Integer"),
          ("Age Stanine", as_composite_qn, "Integer"),
          ("Local Stanine", ls_composite_qn, "Integer"),
          ("Standard Age Score Upper Bound", sas_upper_composite_qn, "Decimal"),
          ("Standard Age Score Lower Bound", sas_lower_composite_qn, "Decimal"),
        ],
        "performanceLevels": [
          ("Completion Criteria Met", completed_composite_qn),
          ("Standard Age Score Valid Flag", sas_valid_composite_qn),
          ("Too Many Omits Flag", tmo_composite_qn),
          ("Extremely Variable Flag", ev_composite_qn),
          ("Chance Flag", chance_composite_qn)
        ]
      }
    } %}

    {% for obj_assess in all_obj_assess %}
      {% set all_scores = [] %}
      {% for score in all_obj_assess[obj_assess]["scores"] %}
        {# TODO: indexing? #}
        {% if score[1] is not none and score[1] | length %}
          {% set _ = all_scores.append((score[0], score[1], score[2]))%}
        {% endif %}
      {% endfor %}

      {
        "objectiveAssessmentReference": {
          "assessmentIdentifier": "CogAT",
          "identificationCode": "{{obj_assess}}",
          "namespace": "uri://www.riversideinsights.com/cognitive_abilities_test"
        },

        "performanceLevels": [
          {# guaranteed to be some #}
          {% for pl in all_obj_assess[obj_assess]["performanceLevels"] %}
            {
              "assessmentReportingMethodDescriptor": "uri://www.riversideinsights.com/cognitive_abilities_test/AssessmentReportingMethodDescriptor#{{pl[0]}}",
              "performanceLevelDescriptor": "uri://www.riversideinsights.com/cognitive_abilities_test/PerformanceLevelDescriptor#{{pl[1]}}",
              "performanceLevelMet": true
            }
            {%- if not loop.last -%}
              ,
            {% endif %}
          {%- endfor -%}
        ],

        "scoreResults": [
          {%- for score in all_scores -%}
            {
              "assessmentReportingMethodDescriptor": "uri://www.riversideinsights.com/cognitive_abilities_test/AssessmentReportingMethodDescriptor#{{score[0]}}",
              "resultDatatypeTypeDescriptor": "uri://www.riversideinsights.com/cognitive_abilities_test/ResultDatatypeTypeDescriptor#{{score[2]}}",
              "result": "{{score[1]}}"
            }
            {%- if not loop.last -%}
              ,
            {% endif %}
          {%- endfor -%}
        ]
      }
      {%- if not loop.last -%}
        ,
      {% endif %} 
    {%- endfor -%}
  ]
}