version: 2
config:
  log_level: INFO
  output_dir: ${OUTPUT_DIR}
  memory_limit: 1GB
  state_file: ${STATE_FILE}
  show_graph: false
  show_stacktrace: true
  parameter_defaults:
    # You can set these values at the command line or leave the defaults
    OUTPUT_DIR: ./output/
    STATE_FILE: ./tmp/.earthmover/runs.csv
    API_YEAR: ''
    STUDENT_ID_NAME: 'edFi_studentUniqueID' # default to the column added by the apply_xwalk package of student ID xwalking feature
    POSSIBLE_STUDENT_ID_COLUMNS: Student_Id,Secondary_Student_Id
    DESCRIPTOR_NAMESPACE_OVERRIDE: uri://ed-fi.org

sources:
  input:
    file: ${INPUT_FILE}
    header_rows: 1
  assessmentReportingMethodDescriptors:
    file: ./seeds/assessmentReportingMethodDescriptors.csv
    header_rows: 1
  assessments:
    file: ./seeds/assessments.csv
    header_rows: 1
  assessmentPeriodDescriptors:
    file: ./seeds/assessmentPeriodDescriptors.csv
    header_rows: 1
  appendix_a:
    file: ./seeds/appendix_a_tests.csv
    header_rows: 1
  performanceLevelDescriptors:
    file: ./seeds/performanceLevelDescriptors.csv
    header_rows: 1
  accommodationDescriptors:
    file: ./seeds/accommodationDescriptors.csv
    header_rows: 1
  assessmentCategoryDescriptors:
    file: ./seeds/assessmentCategoryDescriptors.csv
    header_rows: 1
  gradeLevelDescriptors:
    file: ./seeds/gradeMappings.csv
    header_rows: 1

transformations:
  input:
    source: $sources.input
    operations: []
    
  cleaned_input:
    source: $transformations.input
    operations:
      # Filter only required columns
      - operation: rename_columns
        columns:
          # "Test": "Test"
          "State Name": "State_Name"
          "Building Code": "Building_Code"
          "Class Grade": "Class_Grade"
          "Date Tested": "Date_Tested"
          "Student ID": "Student_Id"
          "Secondary Student ID": "Secondary_Student_Id"
          # "Battery": "Battery"
          # "Level": "Level"
          # "Form": "Form"
          "Norm Year": "Norm_Year"
          # "Semester": "Semester"
          "Programs String": "Programs_String"
          "Number Attempted (NA)": "Number_Attempted"
          "Completion Criteria (CC)": "Completion_Criteria"
          "Raw Score (RS)": "Raw_Score"
      # Simplify column names
      - operation: add_columns
        columns:
          Standard_Score: "{% raw -%}{{ __row_data__.get('Standard Score (SS)') or ''}}{%- endraw %}"
          National_Percentile_Rank: "{% raw -%}{{ __row_data__.get('National Percentile Rank (NPR)') or ''}}{%- endraw %}"
          National_Stanine: "{% raw -%}{{ __row_data__.get('National Stanine (NS)') or ''}}{%- endraw %}"
          Standard_Score_Universal_Scale_Score: "{% raw -%}{{ __row_data__.get('Standard Score (SS)/Universal Scale Score (USS)') or ''}}{%- endraw %}"
          National_Percentile_Rank_Grade_Percentile_Rank: "{% raw -%}{{ __row_data__.get('National Percentile Rank (NPR)/Grade Percentile Rank (GPR)') or ''}}{%- endraw %}"
          National_Stanine_Grade_Stanine: "{% raw -%}{{ __row_data__.get('National Stanine (NS)/Grade Stanine (GS)') or ''}}{%- endraw %}"
          Local_Percentil_Rank: "{% raw -%}{{ __row_data__.get('Local Percentil Rank')  or __row_data__.get('Local Percentile Rank') or ''}}{%- endraw %}"
          Local_Stanine: "{% raw -%}{{ __row_data__.get('Local Stanine')  or __row_data__.get('Local Stanines') or ''}}{%- endraw %}"
          Common_Core_Standards_Domain_Percent_Correct: "{% raw -%}{{ __row_data__.get('Common Core Standards (CCS) Domain Percent Correct')  or __row_data__.get('Common Core Standards (CSS) Domain Percent Correct') or ''}}{%- endraw %}"
          Common_Core_Standards_without_Computation_Domain_Percent_Correct: "{% raw -%}{{ __row_data__.get('Common Core Standards (CCS) without Computation Domain Percent Correct')  or __row_data__.get('Common Core Standards (CSS) without Computation Domain Percent Correct') or ''}}{%- endraw %}"
          Standard_Score_Norm_Based: "{% raw -%}{{ __row_data__.get('Standard Score based on 2011 or 2005 norms')  or __row_data__.get('Standard Score based on 2005 norms') or ''}}{%- endraw %}"
          Grade_Equivalent_Norm_Based: "{% raw -%}{{ __row_data__.get('Grade Equivalent based on 2011 or 2005 norms')  or __row_data__.get('Grade Equivalent based on 2005 norms') or ''}}{%- endraw %}"
          National_Percentile_Rank_Norm_Based: "{% raw -%}{{ __row_data__.get('National Percentile Rank based on 2011 or 2005 norms')  or __row_data__.get('National Percentile Rank based on 2005 norms') or ''}}{%- endraw %}"
          National_Stanine_Norm_Based: "{% raw -%}{{ __row_data__.get('National Stanine based on 2011 or 2005 norms')  or __row_data__.get('National Stanine based on 2005 norms') or ''}}{%- endraw %}"
          Mode_of_Administration: "{% raw -%}{{ __row_data__.get('Mode of Administration String')  or __row_data__.get('Mode of Administration') or ''}}{%- endraw %}"
      - operation: modify_columns
        columns:
          Level: "{% raw -%}{{ (Level | int) | string if Level is not none and Level|string|trim != '' else '' }}{%- endraw %}"
          Norm_Year: "{%raw%}20{{value[-2:]}}{%endraw%}"
      - operation: date_format
        column: Date_Tested
        from_format: "%m%d%Y"
        to_format: "%Y-%m-%d"
      - operation: add_columns
        columns:
          schoolYear: "{%raw%}{{ Date_Tested[:4] | int + 1 if Date_Tested[5:7] | int >= 7 else Date_Tested[:4] | int }}{%endraw%}"
          descriptor_namespace_override: ${DESCRIPTOR_NAMESPACE_OVERRIDE}
      - operation: map_values
        column: Class_Grade
        map_file: ./seeds/gradeMappings.csv
      - operation: map_values
        column: Semester
        mapping:
          "1": Fall
          "2": MidYear
          "3": Spring
      # rename student id column after x-walk operation
      - operation: rename_columns
        columns:
          ${STUDENT_ID_NAME}: student_unique_id

  appendix_a:
    source: $sources.appendix_a
    operations:
      - operation: add_columns
        columns:
          join_key: "1"

  stage_grade_level:
    source: $sources.gradeLevelDescriptors
    operations:
      - operation: add_columns
        columns:
          joinKey: "Key"
      - operation: rename_columns
        columns:
          to: Grade_Descriptor

  performance_levels:
    source: $sources.performanceLevelDescriptors
    operations:
      - operation: add_columns
        columns:
          join_key: "1"
          performance_json: >
              {%raw-%} {%- if codeValue is not none and codeValue | length -%} 
              {
                 "assessmentReportingMethodDescriptor": "{{reportingMethod}}",
                 "performanceLevelDescriptor": "{{namespace}}#{{codeValue}}"
              }
              {%-endif-%}
              {%-endraw%}
      - operation: modify_columns
        columns:
          performance_json: "{%raw%}{{performance_json | replace('\n', '')-}}{%endraw%}"
      - operation: group_by
        group_by_columns:
          - join_key
        create_columns: 
          performance_json: agg(performance_json,,)

  period_descriptors:
    source: $sources.assessmentPeriodDescriptors
    operations:
      - operation: add_columns
        columns:
          join_key: "1"
          period_json: >
              {%raw-%}  
              {
                "assessmentPeriodDescriptor": "{{namespace}}#{{codeValue}}"
              }
              {%-endraw%}
      - operation: modify_columns
        columns:
          period_json: "{%raw%}{{period_json | replace('\n', '')}}{%endraw%}"
      - operation: group_by
        group_by_columns:
          - join_key
        create_columns: 
          period_json: agg(period_json,,)
      - operation: keep_columns
        columns:
          - join_key
          - period_json

  grades_json:
    source: $transformations.stage_grade_level 
    operations:
      - operation: keep_columns
        columns:
          - Grade_Descriptor
      - operation: distinct_rows
      - operation: add_columns
        columns:
          join_key: "1"
          grade_json: >
            {%raw-%}
            {
              "gradeLevelDescriptor": "{{Grade_Descriptor}}"
            },
            {%-endraw%}
      - operation: modify_columns
        columns:
          grade_json: "{%raw%}{{grade_json | replace('\n', '')-}}{%endraw%}"
      # group and aggregate:
      - operation: group_by
        group_by_columns:
          - join_key
        create_columns:
          grade_json: agg(grade_json,)
      # there will be a trailing comma, want to get rid of that
      - operation: modify_columns
        columns:
          grade_json: "{%raw%}{{value.rstrip().rstrip(',')}}{%endraw%}"
      - operation: keep_columns
        columns:
          - join_key
          - grade_json

  scores_json:
    source: $sources.assessmentReportingMethodDescriptors
    operations:
      - operation: filter_rows
        query: codeValue in ["Predicted SAT Critical Reading High", "Predicted SAT Critical Reading Low","Predicted SAT Math High","Predicted SAT Math Low","Predicted ACT Composite High","Predicted ACT Composite Low"]
        behavior: include
      - operation: add_columns
        columns:
          join_key: "1"
          assessmentReportingMethodDescriptor: "{%raw%}{{namespace}}#{{codeValue}}{%endraw%}"
          resultDatatypeTypeDescriptor: "{%raw%}${DESCRIPTOR_NAMESPACE_OVERRIDE}/ResultDatatypeTypeDescriptor#{{datatype}}{%endraw%}"
      - operation: add_columns
        columns:
          scores_json: >
            {%raw-%}
            {
              "assessmentReportingMethodDescriptor": "{{assessmentReportingMethodDescriptor}}",
              "resultDatatypeTypeDescriptor": "{{resultDatatypeTypeDescriptor}}"
            },
            {%-endraw%}
      - operation: modify_columns
        columns:
          scores_json: "{%raw%}{{scores_json | replace('\n', '')-}}{%endraw%}"
      # group and aggregate:
      - operation: group_by
        group_by_columns:
          - join_key
        create_columns:
          scores_json: agg(scores_json,)
      # there will be a trailing comma, want to get rid of that
      - operation: modify_columns
        columns:
          scores_json: "{%raw%}{{value.rstrip().rstrip(',')}}{%endraw%}"
      - operation: keep_columns
        columns: 
          - join_key
          - scores_json
  
  assessments_source_modified:
    source: $sources.assessments
    operations:
      - operation: add_columns
        columns:
          join_key: "1"
          descriptor_namespace_override: ${DESCRIPTOR_NAMESPACE_OVERRIDE}
      
  assessments:
    source: $transformations.assessments_source_modified
    operations:
      - operation: keep_columns
        columns:
          - assessmentIdentifier
          - namespace
          - assessmentFamily
          - assessmentTitle
          - assessmentCategoryDescriptor
          - academicSubjectDescriptor
          - join_key
          - descriptor_namespace_override
      - operation: distinct_rows 
      - operation: join
        sources: 
          - $transformations.scores_json
        join_type: outer
        left_key: join_key
        right_key: join_key
      - operation: join
        sources: 
          - $transformations.grades_json
        join_type: inner
        left_keys: 
          - join_key
        right_keys: 
          - join_key
      - operation: join
        sources: 
          - $transformations.period_descriptors
        join_type: inner
        left_keys: 
          - join_key
        right_keys: 
          - join_key
  
  objectiveAssessments:
    source: $transformations.assessments_source_modified
    operations:
      - operation: keep_columns
        columns:
          - assessmentIdentifier
          - namespace
          - academicSubjectDescriptor
          - Level
          - join_key
          - descriptor_namespace_override      
      - operation: join
        sources:
          - $transformations.appendix_a
        join_type: outer
        left_key: join_key
        right_key: join_key
    # Cleanup level-slot combination as per appendix a.
    {% for i in range(5,19) %}
      {% if i > 8 %}
      - operation: filter_rows
        query: 'test_slot == "6" & Level == "{{i}}" & identificationCode == "L"'
        behavior: exclude
      {% endif %}
      {% if i < 9 or i > 17 %}
      - operation: filter_rows
        query: 'test_slot == "6" & Level == "{{i}}" & identificationCode == "WE"' 
        behavior: exclude
      {% endif %}
      {% if i != 6 %}
      - operation: filter_rows
        query: 'test_slot == "25" & Level == "{{i}}"'
        behavior: exclude
      {% endif %}
      {% if i != 6 %}
      - operation: filter_rows
        query: 'test_slot == "26" & Level == "{{i}}"'
        behavior: exclude
      {% endif %}
    {% endfor %}
      - operation: add_columns
        columns:
          rowsOrder: 1
      - operation: join
        sources: 
          - $transformations.performance_levels
        join_type: inner
        left_keys: 
          - join_key
        right_keys: 
          - join_key
      - operation: keep_columns
        columns:
          - assessmentIdentifier
          - namespace
          - academicSubjectDescriptor
          - identificationCode
          - objective_assessment_description
          - rowsOrder
          - join_key
          - descriptor_namespace_override
          - performance_json
      - operation: distinct_rows

  student_assessments:
    source: $transformations.cleaned_input
    operations:
      - operation: join
        sources:
          - $transformations.assessments_source_modified
        join_type: left
        left_keys: 
          - Battery
          - Form
          - Level 
        right_keys: 
          - Battery
          - Form
          - Level
      - operation: add_columns
        columns:
          combined_student_assessment_id: "{%raw%}{{student_unique_id}}-{{State}}-{{District}}-{{School}}-{{schoolYear}}-{{assessmentIdentifier}}-{{assessment_period_codeValue}}{%endraw%}" 
          student_assessment_identifier: "{%raw%}{{ md5(combined_student_assessment_id) }}{%endraw%}"
          descriptor_namespace_override: ${DESCRIPTOR_NAMESPACE_OVERRIDE}
          # Information regarding Form and Level for the assessment
          serialNumber: "{%raw%}Form_{{Form}}-Level_{{Level}}{%endraw%}"
      # filter out rows with missing student IDs
      - operation: filter_rows
        query: "student_unique_id  != ''"
        behavior: include

  prepare_student_assessment_valid_school:
    source: $transformations.student_assessments
    operations:
      - operation: modify_columns
        columns:
          Building_Code: "{% raw -%}{{ (Building_Code | int) | string if Building_Code is not none and Level|string|trim != '' else '' }}{%- endraw %}"
      - operation: filter_rows
        query: Building_Code != "" and Building_Code != None
        behavior: include

destinations:
  assessments:
    source: $transformations.assessments
    template: ./templates/assessments.jsont
    extension: jsonl
    linearize: True
  objectiveAssessments:
    source: $transformations.objectiveAssessments
    template: ./templates/objectiveAssessments.jsont
    extension: jsonl
    linearize: True
  studentAssessments:
    source: $transformations.student_assessments
    template: ./templates/studentAssessments.jsont
    extension: jsonl
    linearize: True
  studentAssessmentEducationOrganizationAssociations:
    source: $transformations.prepare_student_assessment_valid_school
    template: ./templates/studentAssessmentEducationOrganizationAssociations.jsont
    extension: jsonl
  assessmentCategoryDescriptors:
    source: $sources.assessmentCategoryDescriptors
    template: ./templates/descriptors.jsont
    extension: jsonl
    linearize: True
  assessmentReportingMethodDescriptors:
    source: $sources.assessmentReportingMethodDescriptors
    template: ./templates/descriptors.jsont
    extension: jsonl
    linearize: True
  assessmentPeriodDescriptors:
    source: $sources.assessmentPeriodDescriptors
    template: ./templates/descriptors.jsont
    extension: jsonl
    linearize: True
  performanceLevelDescriptors:
    source: $sources.performanceLevelDescriptors
    template: ./templates/descriptors.jsont
    extension: jsonl
    linearize: True
  accommodationDescriptors:
    source: $sources.accommodationDescriptors
    template: ./templates/descriptors.jsont
    extension: jsonl
    linearize: True
