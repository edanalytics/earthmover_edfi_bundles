# See accompanying README.md for details about this file.

version: 2

config:
  log_level: INFO
  output_dir: ${OUTPUT_DIR}
  memory_limit: 1GB
  state_file: ./runs.csv
  show_graph: False
  parameter_defaults:
    STUDENT_ID_NAME: Student_StateID
    STUDENT_ID_FROM: Student_StateID
    STUDENT_ID_XWALK: ''
    STUDENT_ID_QUERY: ''
    DATABASE_CONNECTION: ''
    POSSIBLE_STUDENT_ID_COLUMNS: StudentID,Student_StateID
    EDFI_STUDENT_ID_TYPES: Local,School,District,State
    EARTHMOVER_NODE_TO_XWALK: $sources.input
    STUDENT_ID_MATCH_RATES: ''


packages: 
{% if "${COMPUTE_MATCH_RATES}" == 'True' %}
  compute_match_rates:
    git: https://github.com/edanalytics/earthmover_edfi_bundles.git
    branch: student_id_alignment
    subdirectory: packages/student_ids/compute_match_rates
{% endif %}
{% if "${STUDENT_ID_MATCH_RATES}" | length %}
  apply_xwalk:
    git: https://github.com/edanalytics/earthmover_edfi_bundles.git
    branch: student_id_alignment
    subdirectory: packages/student_ids/apply_xwalk
{% endif %}


sources:
  assessmentReportingMethodDescriptors:
    file: ./seeds/assessmentReportingMethodDescriptors.csv
    header_rows: 1
  performanceLevelDescriptors:
    file: ./seeds/performanceLevelDescriptors.csv
    header_rows: 1
  assessments:
    file: ./seeds/assessments.csv
    header_rows: 1

  input:
    # THIS FILE DOES NOT EXIST; IT MUST BE SUPPLIED BY THE USER!
    file: ${INPUT_FILE}
    header_rows: 1
    # See the accompanying README.md for a list of required columns for this file

    # This file or query only needs to be supplied if the source assessment file does not
    # contain the studentUniqueId used by Ed-Fi
  {% if "${STUDENT_ID_QUERY}" | length %}
  student_id_mapping:
    connection: ${DATABASE_CONNECTION}
    query: ${STUDENT_ID_QUERY}

  {% else %}
  student_id_mapping:
    file: ${STUDENT_ID_XWALK}
    header_rows: 1
    columns: 
      - student_id_from 
      - student_id_to
    optional: True 
  {% endif %}

  {% if "${COMPUTE_MATCH_RATES}" == 'True' or "${STUDENT_ID_MATCH_RATES}" | length %}
  edfi_roster:
    connection: ${DATABASE_CONNECTION}
    query: >
      with ids as (
          select
              tenant_code, api_year, k_student, ed_org_id,
              object_construct_keep_null('assigningOrganizationIdentificationCode', id_system,
                  'identificationCode', id_code) as stu_id_code,
          from analytics.prod_stage.stg_ef3__stu_ed_org__identification_codes
      ),
      aggd_ids as (
          select
              tenant_code, api_year, k_student, ed_org_id,
              array_agg(stu_id_code) as stu_id_codes
          from ids group by 1,2,3,4
      )
      select
          object_construct('educationOrganizationId', ed_org_id,
          'link', object_construct(
              'rel', 'LocalEducationAgency')) as "educationOrganizationReference",
          object_construct('studentUniqueId', stu.student_unique_id) as "studentReference",
          stu_id_codes as "studentIdentificationCodes"
      from aggd_ids
          join analytics.prod_stage.stg_ef3__students stu on aggd_ids.k_student=stu.k_student
      where aggd_ids.tenant_code='creede_sd'
          and aggd_ids.api_year=2024
  {% endif %}

  {% if "${STUDENT_ID_MATCH_RATES}" | length %}
  student_id_match_rates: 
    file: ${STUDENT_ID_MATCH_RATES}
  {% endif %}

# notes:
# - left out all seasontoseasonGrowthQuintile


transformations:
  nwea_map_student_assessment:
    source: $sources.input
    operations:
      - operation: modify_columns
        columns:
          StudentID: "{%raw%}{{StudentID|int}}{%endraw%}"
          Student_StateID: "{%raw%}{{Student_StateID|int}}{%endraw%}"
      - operation: join 
        sources: 
          - $sources.student_id_mapping
        left_key: ${STUDENT_ID_FROM}
        right_key: student_id_from
        join_type: left
      - operation: duplicate_columns
        columns: 
          ${STUDENT_ID_NAME}: studentUniqueId
      - operation: modify_columns
        columns: 
          studentUniqueId: "{%raw%}{{value|int(value)|string}}{%endraw%}"
      - operation: add_columns
        columns:
          school_year: "{%raw%}{{TermName[-4:]}}{%endraw%}"
      - operation: date_format
        column: TestStartDate
        from_format: "%m/%d/%Y"
        to_format: "%Y-%m-%d"
      # special handling for ComboStudentAssessment, which has no TestID
      - operation: combine_columns
        columns:
          - studentUniqueId
          - TestName
          - TermName
          - TestStartDate
          - TestStartTime
        new_column: generated_test_id
        separator: '-'


  {% for i in range(1, 9) %} 
  goal_{{i}}: 
    source: $sources.input
    operations:
      - operation: keep_columns
        columns: 
          - Goal{{i}}Name
      - operation: distinct_rows
      - operation: rename_columns
        columns: 
          Goal{{i}}Name: identificationCode
    {%  endfor %}
  
  objective_assessments:
    source: $transformations.goal_1
    operations: 
      - operation: union
        sources:
          {% for i in range(2, 9) %} 
          - $transformations.goal_{{i}}
          {%  endfor %}
      - operation: filter_rows
        query: identificationCode != ''
        behavior: include
      - operation: distinct_rows


  {% for i in range(1, 10) %}
  proj_prof_{{i}}:
    source: $sources.input
    operations:
      - operation: keep_columns
        columns: 
          - ProjectedProficiencyStudy{{i}}
      - operation: distinct_rows
      - operation: rename_columns
        columns: 
          ProjectedProficiencyStudy{{i}}: codeValue
  {% endfor %}

  proj_prof:
    source: $transformations.proj_prof_1
    operations: 
      - operation: union
        sources:
        {% for i in range(2, 10) %}
          - $transformations.proj_prof_{{i}}
        {% endfor %}
      - operation: filter_rows
        query: codeValue != ''
        behavior: include
      - operation: distinct_rows
      - operation: add_columns
        columns:
          description: Projected Proficiency in linked assessment
          namespace: uri://www.nwea.org/map/AssessmentReportingMethodDescriptor
          shortDescription: Projected Proficiency
          column_name: ProjectedProficiencyStudy
          data_type: Level
          is_deprecated: False
          score_or_performance: score

  reporting_methods:
    source: $sources.assessmentReportingMethodDescriptors
    operations: 
      - operation: filter_rows
        query: is_deprecated == 'False'
        behavior: include
      - operation: union
        sources:
          - $transformations.proj_prof

destinations:
  assessmentReportingMethodDescriptors:
    source: $transformations.reporting_methods
    template: ./templates/assessmentReportingMethodDescriptors.jsont
    extension: jsonl
    linearize: True
  performanceLevelDescriptors:
    source: $sources.performanceLevelDescriptors
    template: ./templates/performanceLevelDescriptors.jsont
    extension: jsonl
    linearize: True
  assessments:
    source: $sources.assessments
    template: ./templates/assessments.jsont
    extension: jsonl
    linearize: True
  objectiveAssessments:
    source: $transformations.objective_assessments
    template: ./templates/objectiveAssessments.jsont
    extension: jsonl
    linearize: True
  studentAssessments:
    source: $transformations.nwea_map_student_assessment
    template: ./templates/studentAssessment.jsont
    extension: jsonl
    linearize: True